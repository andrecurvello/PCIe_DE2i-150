module OrAtom 
#(
	parameter W = 10,
	parameter B = 32
)
(
	input wire clk,
	
	//connect ram source
	output reg oe,
	output reg [W-1:0] rd_addr,
	input wire [B-1:0] rd_data,
	
	//connect ram destination
	output reg we,
	output reg [W-1:0] wr_addr,
	output reg [B-1:0] wr_data,
	
	//enable
	input wire en,
	
	//ready
	output reg done
);


parameter IDLE        	= 6'b000001;
parameter START      	= 6'b000010;
parameter READ        	= 6'b000100;
parameter WRITE     	 	= 6'b001000;
parameter IS_DONE       = 6'b010000;
parameter DONE 		  	= 6'b100000;

reg[5:0] current_state;
reg[5:0] next_state;

always @(posedge clk)
begin
    current_state <= next_state;
end

always @(posedge clk)
begin
  if (next_state == IDLE)
	 rd_addr <= 0;
  else if (next_state == IS_DONE)
	 rd_addr <= rd_addr + 1;
end

always @(posedge clk)
begin
  if (next_state == IDLE)
	 wr_addr <= 0;
  else if (next_state == IS_DONE)
	 wr_addr <= wr_addr + 1;
end

always @(posedge clk)
begin
  if (next_state == WRITE)
		wr_data <= rd_data | {{(B-1){1'b0}}, {1'b1}};
  else 
		wr_data = 0;
end

always @(*)
begin
  case (current_state)
    IDLE: 		begin
						if (en == 1'b1)
							next_state = START;
						else
							next_state = IDLE;
					end
	 START:  		next_state = READ;
	 READ: 			next_state = WRITE;
    WRITE:  		next_state = IS_DONE;
	 IS_DONE:   begin
						if (wr_addr == 0) 
							next_state = DONE;
						else 
							next_state = READ;
					end
	 DONE:			next_state = DONE;
	 
  endcase
end

always @(posedge clk)
begin
	if (next_state == START) begin
		oe = 1'b1;
		we = 1'b1;
	end
	else if (next_state == DONE) begin
		oe = 1'b0;
		we = 1'b0;
	end
end

always @(posedge clk)
begin
	if (next_state == DONE) 
		done <= 1'b1;
	else 
		done <= 1'b0;
end

endmodule